package mcma

import (
	"fmt"
	"testing"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	mcmaclient "github.com/ebu/mcma-libraries-go/client"
)

func TestAccMcmaResource_basic(t *testing.T) {
	resourceName := acctest.RandStringFromCharSet(5, acctest.CharSetAlpha)
	var resourceMap map[string]interface{}
	createTestCase := func(providerConfig string) resource.TestCase {
		return resource.TestCase{
			Providers: testAccProviders,
			CheckDestroy: resource.ComposeTestCheckFunc(
				testAccCheckMcmaResourceDestroy,
			),
			Steps: []resource.TestStep{
				{
					Config: testAccountMcmaResource(resourceName, providerConfig),
					Check: resource.ComposeTestCheckFunc(
						testAccCheckMcmaResourceExists("mcma_resource.bm_content_"+resourceName, &resourceMap),
					),
				},
			},
		}
	}
	resource.Test(t, createTestCase(getMcmaApiKeyProviderConfigFromEnvVars()))
}

func testAccCheckMcmaResourceDestroy(s *terraform.State) error {
	resourceManager := testAccProvider.Meta().(*mcmaclient.ResourceManager)
	for _, rs := range s.RootModule().Resources {
		if rs.Type != "mcma_resource" {
			continue
		}
		existing, err := resourceManager.GetResource("BMContent", rs.Primary.ID)
		if err != nil {
			return err
		}
		for i := 0; existing != nil && i < 30; i++ {
			time.Sleep(1 * time.Second)
			existing, err = resourceManager.GetResource("BMContent", rs.Primary.ID)
			if err != nil {
				return err
			}
		}
		if existing != nil {
			return fmt.Errorf("resource (%s) still exists", rs.Primary.ID)
		}
	}
	return nil
}

func testAccountMcmaResource(resourceName string, providerConfig string) string {
	return fmt.Sprintf(`
%s

resource "mcma_resource" "bm_content_%s" {
  type = "BMContent"
  resource_json = jsonencode({
    metadata = {
      name = "Terraform provider test %s"
      description = "Test asset generated by Terraform provider acceptance tests"
	}
  })
}
`, providerConfig, resourceName, resourceName)
}

func testAccCheckMcmaResourceExists(resourceName string, mcmaResource *map[string]interface{}) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		keys := ""
		for k := range s.RootModule().Resources {
			if len(keys) > 0 {
				keys += "\n"
			}
			keys += k
		}
		rs, ok := s.RootModule().Resources[resourceName]
		if !ok {
			return fmt.Errorf("resource not found: %s", resourceName)
		}
		if rs.Primary.ID == "" {
			return fmt.Errorf("resource ID not set")
		}
		resourceManager := testAccProvider.Meta().(*mcmaclient.ResourceManager)
		p, err := resourceManager.GetResource("BMContent", rs.Primary.ID)
		if err != nil {
			return err
		}
		if p == nil {
			return fmt.Errorf("resource with ID %s not found", rs.Primary.ID)
		}
		mcmaResource = &p
		return nil
	}
}
